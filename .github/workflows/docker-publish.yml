name: Build

on:
  schedule:
    - cron:  '0 0 * * *'
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:



jobs:
  determine-versions:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Get latest GraalVM versions
        id: graalvm
        run: |
          # Function to fetch all GraalVM tags from ghcr.io
          fetch_graalvm_tags() {
            local page=1
            local all_tags="[]"

            while true; do
              response=$(curl -s \
                -H "Accept: application/vnd.github.v3+json" \
                -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                "https://api.github.com/orgs/graalvm/packages/container/graalvm-community/versions?per_page=100&page=${page}")

              # Check if we have results
              count=$(echo "$response" | jq -r '. | length')
              if [ "$count" -eq 0 ]; then
                break
              fi

              # Append results to all_tags
              all_tags=$(echo "$all_tags" "$response" | jq -s '.[0] + .[1]')

              ((page++))
            done

            # Extract and format the latest ol9 version
            latest_version=$(echo "$all_tags" | jq -r '
              map(select(
                .metadata.container.tags[] |
                test("^[0-9]+\\.[0-9]+\\.[0-9]+-ol9-[0-9]+$")
              )) |
              sort_by(.metadata.container.tags[0]) |
              reverse |
              .[0].metadata.container.tags[] |
              select(test("^[0-9]+\\.[0-9]+\\.[0-9]+-ol9-[0-9]+$"))
            ')

            echo "$latest_version"
          }

          GRAAL_VERSION=$(fetch_graalvm_tags)
          echo "version=${GRAAL_VERSION}" >> $GITHUB_OUTPUT

      - name: Get Temurin versions
        id: temurin
        run: |
          # Function to fetch all tags
          fetch_all_tags() {
            local page=1
            local all_tags="[]"

            while true; do
              response=$(curl -s "https://hub.docker.com/v2/namespaces/library/repositories/eclipse-temurin/tags/?page=${page}&page_size=100&ordering=last_updated")

              # Check if we have results
              count=$(echo "$response" | jq -r '.results | length')
              if [ "$count" -eq 0 ]; then
                break
              fi

              # Append results to all_tags
              all_tags=$(echo "$all_tags" "$response" | jq -s '.[0] + .[1].results')

              ((page++))
            done

            echo "$all_tags"
          }

          # Get all tags once
          ALL_TAGS=$(fetch_all_tags)

          # Function to extract latest version for a major version and distribution
          get_latest_version() {
            local MAJOR=$1
            local DIST=$2
            echo "$ALL_TAGS" | jq -r --arg major "$MAJOR" --arg dist "$DIST" '
              map(select(
                .name |
                test("^" + $major + "\\.[0-9]+\\.[0-9]+_[0-9]+-jdk-" + $dist + "$")
              )) |
              .[0].name // empty'
          }

          # Get latest versions for LTS releases (11, 17, 21) for both jammy and focal
          echo "v11_jammy=$(get_latest_version 11 'jammy')" >> $GITHUB_OUTPUT
          echo "v17_jammy=$(get_latest_version 17 'jammy')" >> $GITHUB_OUTPUT
          echo "v21_jammy=$(get_latest_version 21 'jammy')" >> $GITHUB_OUTPUT
          echo "v11_focal=$(get_latest_version 11 'focal')" >> $GITHUB_OUTPUT
          echo "v17_focal=$(get_latest_version 17 'focal')" >> $GITHUB_OUTPUT

      - name: Set matrix
        id: set-matrix
        run: |
          cat << EOF > matrix.json
          {
            "baseImage": [
              {
                "base": "graalvm-community",
                "version": "${{ steps.graalvm.outputs.version }}",
                "registry": "ghcr.io/graalvm/"
              },
              {
                "base": "eclipse-temurin",
                "version": "${{ steps.temurin.outputs.v21_jammy }}"
              },
              {
                "base": "eclipse-temurin",
                "version": "${{ steps.temurin.outputs.v17_jammy }}"
              },
              {
                "base": "eclipse-temurin",
                "version": "${{ steps.temurin.outputs.v11_jammy }}"
              },
              {
                "base": "eclipse-temurin",
                "version": "${{ steps.temurin.outputs.v17_focal }}"
              },
              {
                "base": "eclipse-temurin",
                "version": "${{ steps.temurin.outputs.v11_focal }}"
              }
            ]
          }
          EOF

          echo "matrix=$(cat matrix.json | jq -c .)" >> $GITHUB_OUTPUT

  build:
    needs: determine-versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        baseImage: ${{ fromJson(needs.determine-versions.outputs.matrix).baseImage }}
        platforms: ['linux/amd64,linux/arm64']
    steps:
    - name: Log in to DockerHub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - uses: actions/checkout@v4
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3.4.0
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v3.8.0
    - name: Available platforms
      run: echo ${{ steps.buildx.outputs.platforms }}
    - name: Get latest Mill version
      id: get_mill_version
      run: |
        MILL_VERSION=$(
          curl --silent -L https://github.com/com-lihaoyi/mill/releases |
          grep -i -w -o '>[0-9]*\.[0-9]*\.[0-9]*</a>' |
          grep -i -w -o '[0-9]*\.[0-9]*\.[0-9]*' |
          sort --version-sort | tail -n 1)
        [[ -z "$MILL_VERSION" ]] && { echo "Failed to get latest mill version" ; exit 1; }
        echo "VERSION=$MILL_VERSION" >> $GITHUB_OUTPUT
    - name: Determine highest version for base image
      id: version_check
      run: |
        highest_version=$(echo '${{ needs.determine-versions.outputs.matrix }}' | jq -r --arg base "${{ matrix.baseImage.base }}" '
          [.. | objects | select(.base == $base).version] | sort | last
        ')
        echo "highest_version=${highest_version}" >> $GITHUB_OUTPUT
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
          images: |
            nightscape/scala-mill
          tags: |
            type=ref,event=branch,pattern={{branch}}
            type=raw,value=${{ matrix.baseImage.base }}-${{ matrix.baseImage.version }}_${{ steps.get_mill_version.outputs.VERSION }}
            type=raw,value=${{ matrix.baseImage.base }}_${{ steps.get_mill_version.outputs.VERSION }},enable=${{ matrix.baseImage.version == steps.version_check.outputs.highest_version }}
            type=raw,value=${{ matrix.baseImage.base }},enable=${{ matrix.baseImage.version == steps.version_check.outputs.highest_version }}
            type=raw,value=latest,enable=${{ matrix.baseImage.base == 'graalvm-community' &&  matrix.baseImage.version == steps.version_check.outputs.highest_version }}
    - name: Build
      uses: docker/bake-action@v6
      with:
          files: |
            ./docker-bake.hcl
            cwd://${{ steps.meta.outputs.bake-file }}
          targets: image-all
          set: |
            image-all.args.MILL_VERSION=${{ steps.get_mill_version.outputs.VERSION }}
            image-all.args.BASE_IMAGE=${{ matrix.baseImage.registry }}${{ matrix.baseImage.base }}:${{ matrix.baseImage.version }}
            *.cache-from=type=gha,scope=provenance
            *.cache-to=type=gha,scope=provenance,mode=max
          push: ${{ github.event_name != 'pull_request' }}
